/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '../../../../src/components/body/selection.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
export class Wrapper_DataTableSelectionComponent {
  context:import0.DataTableSelectionComponent;
  changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  constructor() {
    this.changed = false;
    this.context = new import0.DataTableSelectionComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
  }
  check_rows(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.rows = currValue;
      this._expr_0 = currValue;
    }
  }
  check_selected(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this.changed = true;
      this.context.selected = currValue;
      this._expr_1 = currValue;
    }
  }
  check_selectEnabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this.changed = true;
      this.context.selectEnabled = currValue;
      this._expr_2 = currValue;
    }
  }
  check_selectionType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this.changed = true;
      this.context.selectionType = currValue;
      this._expr_3 = currValue;
    }
  }
  check_rowIdentity(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this.changed = true;
      this.context.rowIdentity = currValue;
      this._expr_4 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
}
var renderType_DataTableSelectionComponent_Host:import4.RenderComponentType = (null as any);
class _View_DataTableSelectionComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _DataTableSelectionComponent_0_4:Wrapper_DataTableSelectionComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DataTableSelectionComponent_Host0,renderType_DataTableSelectionComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'datatable-selection',import2.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_DataTableSelectionComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._DataTableSelectionComponent_0_4 = new Wrapper_DataTableSelectionComponent();
    this._appEl_0.initComponent(this._DataTableSelectionComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._DataTableSelectionComponent_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DataTableSelectionComponent) && (0 === requestNodeIndex))) { return this._DataTableSelectionComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._DataTableSelectionComponent_0_4.detectChangesInInputProps(this,this._el_0,throwOnChange)) { this._appEl_0.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    this._DataTableSelectionComponent_0_4.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_DataTableSelectionComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_DataTableSelectionComponent_Host === (null as any))) { (renderType_DataTableSelectionComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_DataTableSelectionComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const DataTableSelectionComponentNgFactory:import9.ComponentFactory<import0.DataTableSelectionComponent> = new import9.ComponentFactory<import0.DataTableSelectionComponent>('datatable-selection',viewFactory_DataTableSelectionComponent_Host0,import0.DataTableSelectionComponent);
const styles_DataTableSelectionComponent:any[] = ([] as any[]);
var renderType_DataTableSelectionComponent:import4.RenderComponentType = (null as any);
class _View_DataTableSelectionComponent0 extends import3.AppView<import0.DataTableSelectionComponent> {
  _text_0:any;
  _text_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DataTableSelectionComponent0,renderType_DataTableSelectionComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this.renderer.projectNodes(parentRenderNode,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_1 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init(([] as any[]),[
      this._text_0,
      this._text_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_DataTableSelectionComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.DataTableSelectionComponent> {
  if ((renderType_DataTableSelectionComponent === (null as any))) { (renderType_DataTableSelectionComponent = viewUtils.createRenderComponentType('',1,import8.ViewEncapsulation.None,styles_DataTableSelectionComponent,{})); }
  return new _View_DataTableSelectionComponent0(viewUtils,parentInjector,declarationEl);
}